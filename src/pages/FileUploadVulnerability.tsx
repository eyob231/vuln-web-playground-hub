
import React, { useState, useRef } from 'react';
import { AlertCircle, Info, Upload } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';

interface UploadedFile {
  id: number;
  name: string;
  type: string;
  size: number;
  isExecutable: boolean;
}

const FileUploadVulnerability = () => {
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [showHint, setShowHint] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      
      // Check if the file extension might be executable
      const executableExtensions = ['.php', '.exe', '.jsp', '.aspx', '.js', '.py', '.sh', '.bat'];
      const isExecutable = executableExtensions.some(ext => file.name.toLowerCase().endsWith(ext));
      
      const newFile: UploadedFile = {
        id: Date.now(),
        name: file.name,
        type: file.type || 'unknown/unknown',
        size: file.size,
        isExecutable
      };
      
      setFiles([...files, newFile]);
      
      // Alert if potentially malicious file detected
      if (isExecutable) {
        toast({
          title: "Potentially Dangerous File Uploaded!",
          description: "You've successfully uploaded a file that could be used for malicious purposes.",
          variant: "destructive",
        });
      } else {
        toast({
          title: "File Uploaded",
          description: `${file.name} has been uploaded.`,
        });
      }

      // Reset input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  const toggleHint = () => {
    setShowHint(!showHint);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold mb-6 text-hacker-red">Insecure File Upload Vulnerability</h1>
      
      <div className="mb-8 p-4 border border-yellow-500 rounded-md bg-yellow-500/10">
        <div className="flex items-start">
          <Info className="h-6 w-6 text-yellow-500 mr-2 flex-shrink-0 mt-0.5" />
          <div>
            <h2 className="text-lg font-bold text-yellow-500">What is an Insecure File Upload Vulnerability?</h2>
            <p className="mt-1 text-gray-300">
              This vulnerability occurs when a web application allows users to upload files without 
              properly validating their type, content, or size. Attackers can upload malicious files 
              (like web shells or server-side scripts) that can execute on the server, potentially 
              leading to complete server compromise.
            </p>
          </div>
        </div>
      </div>

      <div className="grid gap-6">
        <Card className="bg-black/50 border border-yellow-500">
          <CardHeader>
            <CardTitle className="text-white">File Upload (Vulnerable)</CardTitle>
            <CardDescription className="text-gray-400">
              This upload form doesn't properly validate file types
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="border-2 border-dashed border-gray-700 rounded-lg p-6 text-center cursor-pointer hover:border-gray-500 transition-colors">
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleUpload}
                  className="hidden"
                />
                <Upload className="h-10 w-10 text-gray-500 mx-auto mb-2" />
                <p className="text-sm text-gray-400 mb-2">Click to upload or drag and drop</p>
                <Button 
                  type="button" 
                  onClick={() => fileInputRef.current?.click()}
                  variant="outline"
                  className="border-yellow-600 text-yellow-600 hover:bg-yellow-600/20"
                >
                  Select File
                </Button>
              </div>
              
              <Button 
                type="button" 
                variant="outline" 
                onClick={toggleHint} 
                className="w-full border-yellow-500 text-yellow-500 hover:bg-yellow-500/20"
              >
                {showHint ? "Hide Hint" : "Show Hint"}
              </Button>
            </div>
          </CardContent>
        </Card>

        {showHint && (
          <Card className="bg-yellow-500/10 border border-yellow-500">
            <CardHeader className="pb-2">
              <CardTitle className="text-yellow-500">Hint</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-300 mb-2">Try uploading these types of files:</p>
              <ul className="list-disc pl-5 text-gray-400 space-y-2">
                <li>PHP files (e.g. <code className="terminal-text">shell.php</code>)</li>
                <li>JavaScript files (e.g. <code className="terminal-text">malicious.js</code>)</li>
                <li>Shell scripts (e.g. <code className="terminal-text">script.sh</code>)</li>
                <li>Files with double extensions (e.g. <code className="terminal-text">image.jpg.php</code>)</li>
              </ul>
            </CardContent>
          </Card>
        )}

        <Card className="bg-black/50 border border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">Uploaded Files</CardTitle>
          </CardHeader>
          <CardContent>
            {files.length === 0 ? (
              <p className="text-gray-500 text-center py-4">No files uploaded yet</p>
            ) : (
              <div className="divide-y divide-gray-800">
                {files.map((file) => (
                  <div key={file.id} className="py-3 flex justify-between items-center">
                    <div>
                      <div className="font-medium text-white">
                        {file.name}
                        {file.isExecutable && (
                          <span className="ml-2 px-2 py-0.5 bg-red-500/20 text-red-400 text-xs rounded-full">
                            Potentially Dangerous
                          </span>
                        )}
                      </div>
                      <div className="text-sm text-gray-400">
                        {file.type} â€¢ {(file.size / 1024).toFixed(2)} KB
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="bg-black/50 border border-red-500">
          <CardHeader>
            <CardTitle className="flex items-center">
              <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
              <span>Prevention Techniques</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="list-disc pl-5 text-gray-300 space-y-2">
              <li>Validate file types, extensions and content</li>
              <li>Use content-type verification (don't rely on extensions alone)</li>
              <li>Implement file size restrictions</li>
              <li>Store uploaded files outside the web root directory</li>
              <li>Use random filenames and maintain the mapping in a database</li>
              <li>Set proper file permissions</li>
              <li>Scan uploaded files with antivirus software</li>
              <li>Use a CDN or separate subdomain for serving uploaded content</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default FileUploadVulnerability;
