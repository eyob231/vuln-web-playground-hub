
import React, { useState } from 'react';
import { AlertCircle, Info } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import { Separator } from '@/components/ui/separator';

interface Message {
  id: number;
  name: string;
  content: string;
}

const XssVulnerability = () => {
  const [name, setName] = useState('');
  const [content, setContent] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    { id: 1, name: 'Admin', content: 'Welcome to our message board!' }
  ]);
  const [showHint, setShowHint] = useState(false);
  const { toast } = useToast();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (name.trim() && content.trim()) {
      const newMessage: Message = {
        id: messages.length + 1,
        name,
        content
      };

      setMessages([...messages, newMessage]);
      
      // Check for successful XSS
      if (content.includes('<script>') || content.includes('onerror=') || content.includes('onclick=')) {
        toast({
          title: "XSS Vulnerability Detected!",
          description: "You've successfully injected JavaScript code.",
          variant: "destructive",
        });
      }
      
      // Clear form
      setContent('');
    }
  };

  const toggleHint = () => {
    setShowHint(!showHint);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold mb-6 text-hacker-red">Cross-Site Scripting (XSS) Vulnerability</h1>
      
      <div className="mb-8 p-4 border border-green-500 rounded-md bg-green-500/10">
        <div className="flex items-start">
          <Info className="h-6 w-6 text-green-500 mr-2 flex-shrink-0 mt-0.5" />
          <div>
            <h2 className="text-lg font-bold text-green-500">What is Cross-Site Scripting?</h2>
            <p className="mt-1 text-gray-300">
              XSS is a security vulnerability that allows attackers to inject client-side scripts (usually JavaScript)
              into web pages viewed by other users. These attacks can steal cookies, session tokens, or other sensitive
              information, deface websites, or redirect users to malicious sites.
            </p>
          </div>
        </div>
      </div>

      <div className="grid gap-6">
        <Card className="bg-black/50 border border-green-500">
          <CardHeader>
            <CardTitle className="text-white">Message Board (Vulnerable to XSS)</CardTitle>
            <CardDescription className="text-gray-400">
              This message board doesn't sanitize user input before rendering it
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-400">Your Name</label>
                <Input
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="Enter your name"
                  className="bg-gray-900 border-gray-700"
                  required
                />
              </div>
              <div>
                <label htmlFor="content" className="block text-sm font-medium text-gray-400">Message</label>
                <Textarea
                  id="content"
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  placeholder="Enter your message"
                  className="bg-gray-900 border-gray-700 min-h-[100px]"
                  required
                />
              </div>
              
              <div className="flex gap-2">
                <Button type="submit" className="bg-green-600 hover:bg-green-700">
                  Post Message
                </Button>
                
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={toggleHint} 
                  className="border-yellow-500 text-yellow-500 hover:bg-yellow-500/20"
                >
                  {showHint ? "Hide Hint" : "Show Hint"}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>

        {showHint && (
          <Card className="bg-yellow-500/10 border border-yellow-500">
            <CardHeader className="pb-2">
              <CardTitle className="text-yellow-500">Hint</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-300 mb-2">Try these XSS payloads:</p>
              <ul className="list-disc pl-5 text-gray-400 space-y-2">
                <li><code className="terminal-text">&lt;script&gt;alert("XSS")&lt;/script&gt;</code></li>
                <li><code className="terminal-text">&lt;img src="x" onerror="alert('XSS')"&gt;</code></li>
                <li><code className="terminal-text">&lt;button onclick="alert('XSS')"&gt;Click me&lt;/button&gt;</code></li>
              </ul>
            </CardContent>
          </Card>
        )}

        <Card className="bg-black/50 border border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">Messages</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {messages.map((message, index) => (
                <div key={message.id}>
                  {index > 0 && <Separator className="my-4" />}
                  <div className="mb-2">
                    <span className="font-semibold text-hacker-green">{message.name}</span>
                    <span className="text-xs text-gray-500 ml-2">#{message.id}</span>
                  </div>
                  {/* This is intentionally vulnerable to XSS */}
                  <div 
                    className="text-gray-300 break-words" 
                    dangerouslySetInnerHTML={{ __html: message.content }} 
                  />
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-black/50 border border-red-500">
          <CardHeader>
            <CardTitle className="flex items-center">
              <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
              <span>Prevention Techniques</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="list-disc pl-5 text-gray-300 space-y-2">
              <li>Output encode/escape all user-generated content</li>
              <li>Use Content Security Policy (CSP) headers</li>
              <li>Implement input validation and sanitization</li>
              <li>Use modern frameworks that automatically escape output</li>
              <li>Set secure cookie attributes (HttpOnly, Secure, SameSite)</li>
              <li>Use the X-XSS-Protection HTTP header</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default XssVulnerability;
