
import React, { useState } from 'react';
import { AlertCircle, Info, Lock, Search } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';

interface UserData {
  id: number;
  name: string;
  email: string;
  role: string;
  ssn: string;
}

const IdorVulnerability = () => {
  const [userId, setUserId] = useState<string>('1');
  const [userData, setUserData] = useState<UserData | null>(null);
  const [showHint, setShowHint] = useState(false);
  const { toast } = useToast();

  // Mock user database
  const users: UserData[] = [
    { id: 1, name: 'John Smith', email: 'john@example.com', role: 'user', ssn: '123-45-6789' },
    { id: 2, name: 'Jane Doe', email: 'jane@example.com', role: 'user', ssn: '987-65-4321' },
    { id: 3, name: 'Admin User', email: 'admin@example.com', role: 'admin', ssn: '111-22-3333' },
  ];

  const fetchUser = () => {
    // Intentionally vulnerable - no authorization check
    const id = parseInt(userId);
    const user = users.find(u => u.id === id);
    
    if (user) {
      setUserData(user);
      
      // Check if accessing sensitive data they shouldn't have access to
      if (id !== 1) {
        toast({
          title: "IDOR Vulnerability Exploited!",
          description: "You've accessed another user's sensitive information.",
          variant: "destructive",
        });
      } else {
        toast({
          title: "Data Retrieved",
          description: `User data for ${user.name} has been loaded.`,
        });
      }
    } else {
      setUserData(null);
      toast({
        title: "User Not Found",
        description: `No user found with ID ${id}.`,
        variant: "default",
      });
    }
  };

  const toggleHint = () => {
    setShowHint(!showHint);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold mb-6 text-hacker-red">Insecure Direct Object References (IDOR)</h1>
      
      <div className="mb-8 p-4 border border-orange-500 rounded-md bg-orange-500/10">
        <div className="flex items-start">
          <Info className="h-6 w-6 text-orange-500 mr-2 flex-shrink-0 mt-0.5" />
          <div>
            <h2 className="text-lg font-bold text-orange-500">What is IDOR?</h2>
            <p className="mt-1 text-gray-300">
              Insecure Direct Object Reference is a security vulnerability that occurs when an application provides direct 
              access to objects based on user-supplied input without proper authorization checks. This allows attackers to 
              bypass authorization and access resources they shouldn't have access to, simply by modifying values like IDs.
            </p>
          </div>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card className="bg-black/50 border border-orange-500">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Search className="h-5 w-5 mr-2" />
              User Information Portal (Vulnerable)
            </CardTitle>
            <CardDescription className="text-gray-400">
              This form doesn't properly validate access permissions
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <label htmlFor="userId" className="block text-sm font-medium text-gray-400">User ID</label>
                <div className="flex gap-2">
                  <Input
                    id="userId"
                    value={userId}
                    onChange={(e) => setUserId(e.target.value)}
                    placeholder="Enter user ID"
                    className="bg-gray-900 border-gray-700"
                  />
                  <Button onClick={fetchUser} className="bg-orange-600 hover:bg-orange-700">
                    Fetch
                  </Button>
                </div>
              </div>
              
              <div className="flex flex-col gap-2 mt-4">
                <Button 
                  variant="outline" 
                  className="border-gray-700 hover:bg-gray-800"
                  onClick={() => setUserId('1')}
                >
                  Load Your Profile (ID: 1)
                </Button>
                
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={toggleHint} 
                  className="border-yellow-500 text-yellow-500 hover:bg-yellow-500/20"
                >
                  {showHint ? "Hide Hint" : "Show Hint"}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="space-y-6">
          {userData ? (
            <Card className="bg-black/50 border border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex justify-between items-center">
                  <span>User Information</span>
                  {userData.role === 'admin' && (
                    <span className="text-sm font-normal bg-red-500/20 text-red-400 py-0.5 px-2 rounded">Admin</span>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div>
                    <label className="text-sm text-gray-400">User ID:</label>
                    <p className="text-white">{userData.id}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">Name:</label>
                    <p className="text-white">{userData.name}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">Email:</label>
                    <p className="text-white">{userData.email}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">Role:</label>
                    <p className="text-white">{userData.role}</p>
                  </div>
                  <div className="pt-2 border-t border-gray-800">
                    <div className="flex items-center mb-1">
                      <Lock className="h-4 w-4 mr-1 text-orange-500" />
                      <label className="text-sm text-orange-400">Social Security Number:</label>
                    </div>
                    <p className="text-white font-mono bg-gray-900 p-2 rounded">{userData.ssn}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card className="bg-black/50 border border-gray-700">
              <CardContent className="p-8">
                <div className="text-center text-gray-500">
                  <Search className="h-12 w-12 mx-auto mb-3 opacity-50" />
                  <p>No user data loaded</p>
                  <p className="text-sm mt-1">Search for a user to view their information</p>
                </div>
              </CardContent>
            </Card>
          )}

          {showHint && (
            <Card className="bg-yellow-500/10 border border-yellow-500">
              <CardHeader className="pb-2">
                <CardTitle className="text-yellow-500">Hint</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-300 mb-2">Try accessing data for other users:</p>
                <ul className="list-disc pl-5 text-gray-400 space-y-2">
                  <li>Try ID <code className="terminal-text">2</code> (another regular user)</li>
                  <li>Try ID <code className="terminal-text">3</code> (an admin user)</li>
                  <li>The application doesn't check if you're authorized to view this data</li>
                </ul>
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      <Card className="mt-6 bg-black/50 border border-red-500">
        <CardHeader>
          <CardTitle className="flex items-center">
            <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
            <span>Prevention Techniques</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="list-disc pl-5 text-gray-300 space-y-2">
            <li>Implement proper authorization checks for every object access</li>
            <li>Use indirect reference maps (map user-visible references to actual database IDs)</li>
            <li>Verify that the accessed object belongs to the authenticated user</li>
            <li>Implement role-based access control (RBAC)</li>
            <li>Use UUID instead of sequential IDs where possible</li>
            <li>Implement proper session management and validation</li>
            <li>Perform security audits to identify potential IDOR vulnerabilities</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
};

export default IdorVulnerability;
